//32 bit aligned left 0 padded instructions

// program loop sum
// int sum = 0;
// for(int i = 0; i <=10 ; i++){
//   sum +=i;
// }
/*
          loadi R0 <= 0 //sum //is already initialized to 0 but why not
          loadi R1 <= 0 //i 
          loadi R2 <= 10 //for test expression 
.loop     bgt R1 > R2 to .finish(pc + 4 + 12)
          add R0+R1 -> R0 
          addi R1+1 -> R1
          jump .loop (pc + 4 - 16)
.finish   store R0 -> R3(0)
*/
// assuming all registers start cleared

// loadi R0 <= 0
// 1111 11 | 00 | 0000 0000 0000 
// opcode  | RD | immediate
// 000 A0440
00 0F C0 00 

// loadi R1 <= 0
// 1111 11 | 01 | 0000 0000 0000 
// opcode  | RD | immediate
// 000 A0440
00 0F D0 00

// loadi R2 <= 10
// 1111 11 | 10 | 0000 0000 1010 
// opcode  | RD | immediate
// 000 A0440
00 0F E0 0A

// bgt R1 R2 to pc + 1*4 + 3*4 (0x41C)
// 100110  | 01 | 10 | 00 0000 0003 
// opcode  | R1 | R2 | offset
// 000 99803
00 09 98 03


// add R0+R1 -> R0 
// 000000  | 00 | 00 | 01 | 0000 0000 
// opcode  | RD | RA | RB | unused
// 000 00100
00 00 01 00


// addi R1+1 -> R1
// 010000  | 01 | 01 | 00 0000 0001 
// opcode  | RD | RA | immediate
// 000 41401
00 04 14 01


// jump .loop (0x40C)
// 110000  | 10 0000 011 | 0 0000
// opcode  | address     | unused
// 000 C2060
00 0C 20 60 



// store R0 -> R3(0)
// 101100  | 11 | 00 | 00 0000 0000 
// opcode  | RA | RT | offset
// 000 B3000
00 0B 30 00